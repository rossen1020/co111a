// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //參照網站的電路圖製作https://tw511.com/a/01/11445.html#_11
    
    Not(in=instruction[15], out=n1);
    Not(in=n1, out=n2);
    And(a=n2, b=instruction[5], out=a5);

    Mux16(a=instruction, b=ALU, sel=a5, out=m1);
    Or(a=n1, b=instruction[5], out=o1);
    ARegister(in=m1, load=o1, out=AR1, out[0..14]=addressM);
    Mux16(a=AR1, b=inM, sel=instruction[12], out=m2);

    And(a=n2, b=instruction[3], out=writeM);
    And(a=instruction[4], b=n2, out=a4);
    DRegister(in=ALU, load=a4, out=DR1);

    And(a=n2, b=instruction[6], out=a6);
    And(a=n2, b=instruction[7], out=a7);
    And(a=n2, b=instruction[8], out=a8);
    And(a=n2, b=instruction[9], out=a9);
    And(a=n2, b=instruction[10], out=a10);
    And(a=n2, b=instruction[11], out=a11);

    ALU(x=DR1, y=m2, no=a6, f=a7, ny=a8, zy=a9, nx=a10, zx=a11,
      out=ALU, out=outM, zr=zr, ng=ng);
    
    And(a=n2, b=instruction[0], out=a0);
    And(a=n2, b=instruction[1], out=a1);
    And(a=n2, b=instruction[2], out=a2);

    And(a=zr, b=a1, out=aout2);
    And(a=ng, b=a2, out=aout3);
    Or(a=aout2, b=aout3, out=o2);

    Not(in=ng, out=nng);
    Not(in=zr, out=nzr);
    And(a=nng, b=nzr, out=anz);
    And(a=anz, b=a0, out=aout1);

    Or(a=aout1, b=o2, out=o3);
    
    PC(in=AR1, reset=reset, inc=true, load=o3, out[0..14] = pc);
}